import { Accountability } from '@directus/shared/types';
import { Router } from 'express';
import { Knex } from 'knex';
import { Logger } from 'pino';
import env from '../env';
import * as exceptions from '../exceptions';
import * as services from '../services';
import { Emitter } from '../emitter';
import { getSchema } from '../utils/get-schema';
import { SchemaOverview } from './schema';
export declare type ExtensionContext = {
    services: typeof services;
    exceptions: typeof exceptions;
    database: Knex;
    env: typeof env;
    emitter: Emitter;
    logger: Logger;
    getSchema: typeof getSchema;
};
export declare type HookContext = {
    database: Knex;
    schema: SchemaOverview | null;
    accountability: Accountability | null;
};
export declare type FilterHandler = (payload: any, meta: Record<string, any>, context: HookContext) => any | Promise<any>;
export declare type ActionHandler = (meta: Record<string, any>, context: HookContext) => void | Promise<void>;
export declare type InitHandler = (meta: Record<string, any>) => void | Promise<void>;
export declare type ScheduleHandler = () => void | Promise<void>;
declare type RegisterFunctions = {
    filter: (event: string, handler: FilterHandler) => void;
    action: (event: string, handler: ActionHandler) => void;
    init: (event: string, handler: InitHandler) => void;
    schedule: (cron: string, handler: ScheduleHandler) => void;
};
declare type HookHandlerFunction = (register: RegisterFunctions, context: ExtensionContext) => void;
export declare type HookConfig = HookHandlerFunction;
declare type EndpointHandlerFunction = (router: Router, context: ExtensionContext) => void;
interface EndpointAdvancedConfig {
    id: string;
    handler: EndpointHandlerFunction;
}
export declare type EndpointConfig = EndpointHandlerFunction | EndpointAdvancedConfig;
export {};
